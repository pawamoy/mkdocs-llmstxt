{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"mkdocs-llmstxt","text":"<p>MkDocs plugin to generate an /llms.txt file.</p> <p>/llms.txt - A proposal to standardise on using an /llms.txt file to provide information to help LLMs use a website at inference time.</p> <p>See our own dynamically generated /llms.txt as a demonstration.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install mkdocs-llmstxt\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Enable the plugin in <code>mkdocs.yml</code>:</p> mkdocs.yml<pre><code>site_name: My project\nsite_description: Description of my project.\nsite_url: https://myproject.com/  # Required for the llmstxt plugin to work.\n\nplugins:\n- llmstxt:\n    markdown_description: Long description of my project.\n    sections:\n      Usage documentation:\n      - file1.md: Description of file1\n      - file2.md  # Descriptions are optional.\n</code></pre> <p>The resulting <code>/llms.txt</code> file will be available at the root of your documentation. With the previous example, it will be accessible at https://myproject.com/llms.txt and will contain the following:</p> <pre><code># My project\n\n&gt; Description of my project.\n\nLong description of my project.\n\n## Usage documentation\n\n- [File1 title](https://myproject.com/file1.md): Description of file1\n- [File2 title](https://myproject.com/file2.md)\n</code></pre> <p>Each source file included in <code>sections</code> will have its own Markdown file available at the specified URL in the <code>/llms.txt</code>. See Markdown generation for more details.</p> <p>File globbing is supported:</p> mkdocs.yml<pre><code>plugins:\n- llmstxt:\n    sections:\n      Usage documentation:\n      - index.md: Main documentation page\n      - usage/*.md\n</code></pre>"},{"location":"#full-output","title":"Full output","text":"<p>Although not explicitly written out in the https://llmstxt.org/ guidelines, it is common to output a <code>llms-full.txt</code> file with every page content expanded. This file can be generated by setting the <code>full_output</code> configuration value:</p> mkdocs.yml<pre><code>plugins:\n- llmstxt:\n    full_output: llms-full.txt\n    sections:\n      Usage documentation:\n      - index.md\n      - usage/*.md\n</code></pre>"},{"location":"#markdown-generation","title":"Markdown generation","text":"<p>To generate a Markdown page from a source file, the plugin will:</p> <ul> <li>Cleanup the HTML output (with BeautifulSoup)</li> <li>Convert it back to Markdown (with Markdownify)</li> </ul> <p>Doing so is necessary to ensure that dynamically generated contents (API documentation, executed code blocks, snippets from other files, Jinja macros, etc.) are part of the generated text files.</p> <p>Credits to Petyo Ivanov for the original idea \u2728.</p> <p>You can disable auto-cleaning of the HTML:</p> mkdocs.yml<pre><code>plugins:\n- llmstxt:\n    autoclean: false\n</code></pre> <p>You can also pre-process the HTML before it is converted back to Markdown:</p> mkdocs.yml<pre><code>plugins:\n- llmstxt:\n    preprocess: path/to/script.py\n</code></pre> <p>The specified <code>script.py</code> must expose a <code>preprocess</code> function that accepts the <code>soup</code> and <code>output</code> arguments:</p> <pre><code>from typing import TYPE_CHECKING\n\nif TYPE_CHECKING:\n    from bs4 import BeautifulSoup\n\ndef preprocess(soup: BeautifulSoup, output: str) -&gt; None:\n    ...  # modify the soup\n</code></pre> <p>The <code>output</code> argument lets you modify the soup depending on which file is being generated.</p> <p>Have a look at our own cleaning function to get inspiration.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#032-2025-09-19","title":"0.3.2 - 2025-09-19","text":"<p>Compare with 0.3.1</p>"},{"location":"changelog/#code-refactoring","title":"Code Refactoring","text":"<ul> <li>Skip files not found, log warning (don't crash) (8407d93 by Timoth\u00e9e Mazzucotelli). Issue-23</li> </ul>"},{"location":"changelog/#031-2025-08-05","title":"0.3.1 - 2025-08-05","text":"<p>Compare with 0.3.0</p>"},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Preserve user-defined ordering of pages (1359e25 by Timoth\u00e9e Mazzucotelli). Issue-21</li> </ul>"},{"location":"changelog/#030-2025-07-14","title":"0.3.0 - 2025-07-14","text":"<p>Compare with 0.2.0</p>"},{"location":"changelog/#features","title":"Features","text":"<ul> <li>Support file descriptions (33f64b3 by Logan). Issue-6, PR-8, Co-authored-by: Timoth\u00e9e Mazzucotelli dev@pawamoy.fr</li> </ul>"},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>Support formatting Markdown tables (f1fc875 by Timoth\u00e9e Mazzucotelli). Issue-13</li> </ul>"},{"location":"changelog/#020-2025-04-08","title":"0.2.0 - 2025-04-08","text":"<p>Compare with 0.1.0</p>"},{"location":"changelog/#breaking-changes","title":"Breaking changes","text":"<p>The configuration options changed, check the docs.</p>"},{"location":"changelog/#code-refactoring_1","title":"Code Refactoring","text":"<ul> <li>Actually generate llms.txt file as per the specification (1f0e417 by Victorien). Issue-1, PR-4, Co-authored-by: Timoth\u00e9e Mazzucotelli dev@pawamoy.fr</li> <li>Use public/internal API layout (4dff69d by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#010-2025-01-14","title":"0.1.0 - 2025-01-14","text":"<p>Compare with first commit</p>"},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>Implement first version (e4d9c5e by Timoth\u00e9e Mazzucotelli).</li> <li>Initial commit (6f25f96 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at dev@pawamoy.fr. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"contributing/#environment-setup","title":"Environment setup","text":"<p>Nothing easier!</p> <p>Fork and clone the repository, then:</p> <pre><code>cd mkdocs-llmstxt\nmake setup\n</code></pre> <p>Note</p> <p>If it fails for some reason, you'll need to install uv manually.</p> <p>You can install it with:</p> <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <p>Now you can try running <code>make setup</code> again, or simply <code>uv sync</code>.</p> <p>You now have the dependencies installed.</p> <p>Run <code>make help</code> to see all the available actions!</p>"},{"location":"contributing/#tasks","title":"Tasks","text":"<p>The entry-point to run commands and tasks is the <code>make</code> Python script, located in the <code>scripts</code> directory. Try running <code>make</code> to show the available commands and tasks. The commands do not need the Python dependencies to be installed, while the tasks do. The cross-platform tasks are written in Python, thanks to duty.</p> <p>If you work in VSCode, we provide an action to configure VSCode for the project.</p>"},{"location":"contributing/#development","title":"Development","text":"<p>As usual:</p> <ol> <li>create a new branch: <code>git switch -c feature-or-bugfix-name</code></li> <li>edit the code and/or the documentation</li> </ol> <p>Before committing:</p> <ol> <li>run <code>make format</code> to auto-format the code</li> <li>run <code>make check</code> to check everything (fix any warning)</li> <li>run <code>make test</code> to run the tests (fix any issue)</li> <li>if you updated the documentation or the project dependencies:<ol> <li>run <code>make docs</code></li> <li>go to http://localhost:8000 and check that everything looks good</li> </ol> </li> <li>follow our commit message convention</li> </ol> <p>If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review.</p> <p>Don't bother updating the changelog, we will take care of this.</p>"},{"location":"contributing/#commit-message-convention","title":"Commit message convention","text":"<p>Commit messages must follow our convention based on the Angular style or the Karma convention:</p> <pre><code>&lt;type&gt;[(scope)]: Subject\n\n[Body]\n</code></pre> <p>Subject and body must be valid Markdown. Subject must have proper casing (uppercase for first letter if it makes sense), but no dot at the end, and no punctuation in general.</p> <p>Scope and body are optional. Type can be:</p> <ul> <li><code>build</code>: About packaging, building wheels, etc.</li> <li><code>chore</code>: About packaging or repo/files management.</li> <li><code>ci</code>: About Continuous Integration.</li> <li><code>deps</code>: Dependencies update.</li> <li><code>docs</code>: About documentation.</li> <li><code>feat</code>: New feature.</li> <li><code>fix</code>: Bug fix.</li> <li><code>perf</code>: About performance.</li> <li><code>refactor</code>: Changes that are not features or bug fixes.</li> <li><code>style</code>: A change in code style/format.</li> <li><code>tests</code>: About tests.</li> </ul> <p>If you write a body, please add trailers at the end (for example issues and PR references, or co-authors), without relying on GitHub's flavored Markdown:</p> <pre><code>Body.\n\nIssue #10: https://github.com/namespace/project/issues/10\nRelated to PR namespace/other-project#15: https://github.com/namespace/other-project/pull/15\n</code></pre> <p>These \"trailers\" must appear at the end of the body, without any blank lines between them. The trailer title can contain any character except colons <code>:</code>. We expect a full URI for each trailer, not just GitHub autolinks (for example, full GitHub URLs for commits and issues, not the hash or the #issue-number).</p> <p>We do not enforce a line length on commit messages summary and body, but please avoid very long summaries, and very long lines in the body, unless they are part of code blocks that must not be wrapped.</p>"},{"location":"contributing/#pull-requests-guidelines","title":"Pull requests guidelines","text":"<p>Link to any related issue in the Pull Request message.</p> <p>During the review, we recommend using fixups:</p> <pre><code># SHA is the SHA of the commit you want to fix\ngit commit --fixup=SHA\n</code></pre> <p>Once all the changes are approved, you can squash your commits:</p> <pre><code>git rebase -i --autosquash main\n</code></pre> <p>And force-push:</p> <pre><code>git push -f\n</code></pre> <p>If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.</p>"},{"location":"credits/","title":"Credits","text":""},{"location":"credits/#exec-1--credits","title":"Credits","text":"<p>These projects were used to build mkdocs-llmstxt. Thank you!</p> <p>Python | uv | copier-uv</p>"},{"location":"credits/#exec-1--runtime-dependencies","title":"Runtime dependencies","text":"Project Summary Version (accepted) Version (last resolved) License beautifulsoup4 Screen-scraping library <code>&gt;=4.12</code> <code>4.13.5</code> MIT License markdown-it-py Python port of markdown-it. Markdown parsing, done right! <code>&gt;=2.2.0, &gt;=1.0.0, &lt;4.0.0</code> <code>3.0.0</code> MIT License markdownify Convert HTML to markdown. <code>&gt;=0.14</code> <code>1.2.0</code> MIT License mdformat CommonMark compliant Markdown formatter <code>&gt;=0.7.21</code> <code>0.7.22</code> MIT License mdformat_tables An mdformat plugin for rendering tables. <code>&gt;=1.0</code> <code>1.0.0</code> MIT License mdurl Markdown URL utilities <code>~=0.1</code> <code>0.1.2</code> MIT License six Python 2 and 3 compatibility utilities <code>&gt;=1.5, &gt;=1.15, &lt;2</code> <code>1.17.0</code> MIT soupsieve A modern CSS selector implementation for Beautiful Soup. <code>&gt;1.2</code> <code>2.8</code> MIT typing_extensions Backported and Experimental Type Hints for Python 3.9+ <code>&gt;=4.9, &gt;=4.0.0</code> <code>4.15.0</code> PSF-2.0 wcwidth Measures the displayed width of unicode strings in a terminal <code>&gt;=0.2.13</code> <code>0.2.13</code> MIT"},{"location":"credits/#exec-1--development-dependencies","title":"Development dependencies","text":"Project Summary Version (accepted) Version (last resolved) License ansimarkup Produce colored terminal text with an xml-like markup <code>~=1.4</code> <code>1.5.0</code> Revised BSD License babel Internationalization utilities <code>&gt;=2.7.0</code> <code>2.17.0</code> BSD-3-Clause backrefs A wrapper around re and regex that adds additional back references. <code>~=5.7.post1</code> <code>5.9</code> MIT build A simple, correct Python build frontend <code>&gt;=1.2</code> <code>1.3.0</code> MIT cappa Declarative CLI argument parser. <code>&gt;=0.29</code> <code>0.30.2</code> ? certifi Python package for providing Mozilla's CA Bundle. <code>&gt;=2017.4.17</code> <code>2025.8.3</code> MPL-2.0 cffi Foreign Function Interface for Python calling C code. <code>&gt;=1.14</code> <code>2.0.0</code> MIT charset-normalizer The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. <code>&gt;=2, &lt;4</code> <code>3.4.3</code> MIT click Composable command line interface toolkit <code>&lt;8.2.2</code> <code>8.2.1</code> BSD-3-Clause colorama Cross-platform colored terminal text. <code>&gt;=0.4</code> <code>0.4.6</code> BSD License coverage Code coverage measurement for Python <code>&gt;=7.10.6</code> <code>7.10.6</code> Apache-2.0 cryptography cryptography is a package which provides cryptographic recipes and primitives to Python developers. <code>&gt;=2.0</code> <code>46.0.1</code> Apache-2.0 OR BSD-3-Clause csscompressor A python port of YUI CSS Compressor <code>&gt;=0.9.5</code> <code>0.9.5</code> BSD docutils Docutils -- Python Documentation Utilities <code>&gt;=0.21.2</code> <code>0.22.1</code> Public Domain + BSD License + GNU General Public License (GPL) duty A simple task runner. <code>&gt;=1.6</code> <code>1.6.3</code> ISC execnet execnet: rapid multi-Python deployment <code>&gt;=2.1</code> <code>2.1.1</code> MIT failprint Run a command, print its output only if it fails. <code>&gt;=1.0.5</code> <code>1.0.6</code> ISC ghp-import Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License git-changelog Automatic Changelog generator using Jinja2 templates. <code>&gt;=2.5</code> <code>2.6.3</code> ISC gitdb Git Object Database <code>&gt;=4.0.1, &lt;5</code> <code>4.0.12</code> BSD License GitPython GitPython is a Python library used to interact with Git repositories <code>&gt;=3.1.44</code> <code>3.1.45</code> BSD-3-Clause griffe Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. <code>&gt;=1.13</code> <code>1.14.0.1.3.1</code> ISC htmlmin2 An HTML Minifier <code>&gt;=0.1.13</code> <code>0.1.13</code> BSD humanize Python humanize utilities <code>&gt;=4.9</code> <code>4.13.0</code> MIT id A tool for generating OIDC identities <code>1.5.0</code> Apache Software License idna Internationalized Domain Names in Applications (IDNA) <code>&gt;=2.5, &lt;4</code> <code>3.10</code> BSD License iniconfig brain-dead simple config-ini parsing <code>&gt;=1</code> <code>2.1.0</code> MIT jaraco.classes Utility functions for Python class constructs <code>3.4.0</code> MIT License jaraco.context Useful decorators and context managers <code>6.0.1</code> MIT License jaraco.functools Functools like those found in stdlib <code>4.3.0</code> MIT jeepney Low-level, pure Python DBus protocol wrapper. <code>&gt;=0.4.2</code> <code>0.9.0</code> MIT Jinja2 A very fast and expressive template engine. <code>&gt;=3.0</code> <code>3.1.6</code> BSD License jsmin JavaScript minifier. <code>&gt;=3.0.1</code> <code>3.0.1</code> MIT License keyring Store and access your passwords safely. <code>&gt;=21.2.0</code> <code>25.6.0</code> MIT License Markdown Python implementation of John Gruber's Markdown. <code>~=3.2</code> <code>3.9</code> BSD-3-Clause markdown-callouts Markdown extension: a classier syntax for admonitions <code>&gt;=0.4</code> <code>0.4.0</code> MIT markdown-exec Utilities to execute code blocks in Markdown files. <code>&gt;=1.8</code> <code>1.11.0.1.1.1</code> ISC markdown-it-py Python port of markdown-it. Markdown parsing, done right! <code>&gt;=2.2.0, &gt;=1.0.0, &lt;4.0.0</code> <code>3.0.0</code> MIT License MarkupSafe Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0</code> <code>3.0.2</code> BSD License mdurl Markdown URL utilities <code>~=0.1</code> <code>0.1.2</code> MIT License mergedeep A deep merge function for \ud83d\udc0d. <code>~=1.3</code> <code>1.3.4</code> MIT License mkdocs Project documentation with Markdown. <code>&gt;=1.6</code> <code>1.6.1</code> BSD-2-Clause mkdocs-autorefs Automatically link across pages in MkDocs. <code>&gt;=1.4</code> <code>1.4.3</code> ISC mkdocs-coverage MkDocs plugin to integrate your coverage HTML report into your site. <code>&gt;=1.0</code> <code>2.0.0</code> ISC mkdocs-get-deps MkDocs extension that lists all dependencies according to a mkdocs.yml file <code>&gt;=0.2.0</code> <code>0.2.0</code> MIT mkdocs-git-revision-date-localized-plugin Mkdocs plugin that enables displaying the localized date of the last git modification of a markdown file. <code>&gt;=1.2</code> <code>1.4.7</code> MIT mkdocs-material Documentation that simply works <code>&gt;=9.5</code> <code>9.6.18+insiders.4.53.17</code> MIT mkdocs-material-extensions Extension pack for Python Markdown and MkDocs Material. <code>~=1.3</code> <code>1.3.1</code> MIT mkdocs-minify-plugin An MkDocs plugin to minify HTML, JS or CSS files prior to being written to disk <code>&gt;=0.8</code> <code>0.8.0</code> MIT mkdocs-section-index MkDocs plugin to allow clickable sections that lead to an index page <code>&gt;=0.3</code> <code>0.3.10</code> MIT mkdocstrings Automatic documentation from sources, for MkDocs. <code>&gt;=0.29</code> <code>0.30.0</code> ISC mkdocstrings-python A Python handler for mkdocstrings. <code>&gt;=1.16.2</code> <code>1.18.2.1.12.1</code> ISC more-itertools More routines for operating on iterables, beyond itertools <code>10.8.0</code> MIT mypy Optional static typing for Python <code>&gt;=1.10</code> <code>1.18.2</code> MIT mypy_extensions Type system extensions for programs checked with the mypy type checker. <code>&gt;=1.0.0</code> <code>1.1.0</code> MIT nh3 Python binding to Ammonia HTML sanitizer Rust crate <code>&gt;=0.2.14</code> <code>0.3.0</code> MIT packaging Core utilities for Python packages <code>&gt;=20</code> <code>25.0</code> Apache Software License + BSD License paginate Divides large result sets into pages for easier browsing <code>~=0.5</code> <code>0.5.7</code> MIT pathspec Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.9.0</code> <code>0.12.1</code> Mozilla Public License 2.0 (MPL 2.0) platformdirs A small Python package for determining appropriate platform-specific dirs, e.g. a <code>user data dir</code>. <code>&gt;=4.4</code> <code>4.4.0</code> MIT pluggy plugin and hook calling mechanisms for python <code>&gt;=1.5, &lt;2</code> <code>1.6.0</code> MIT ptyprocess Run a subprocess in a pseudo terminal <code>~=0.6</code> <code>0.7.0</code> ISC License (ISCL) pycparser C parser in Python <code>2.23</code> BSD-3-Clause Pygments Pygments is a syntax highlighting package written in Python. <code>&gt;=2.7.2</code> <code>2.19.2</code> BSD-2-Clause pymdown-extensions Extension pack for Python Markdown. <code>~=10.2</code> <code>10.16.1</code> MIT pyproject_hooks Wrappers to call pyproject.toml-based build backend hooks. <code>1.2.0</code> MIT License pytest pytest: simple powerful testing with Python <code>&gt;=8.2</code> <code>8.4.2</code> MIT pytest-cov Pytest plugin for measuring coverage. <code>&gt;=5.0</code> <code>7.0.0</code> MIT pytest-randomly Pytest plugin to randomly order tests and control random.seed. <code>&gt;=3.15</code> <code>4.0.1</code> MIT pytest-xdist pytest xdist plugin for distributed testing, most importantly across multiple CPUs <code>&gt;=3.6</code> <code>3.8.0</code> MIT python-dateutil Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.9.0.post0</code> BSD License + Apache Software License pytz World timezone definitions, modern and historical <code>&gt;=2025.1</code> <code>2025.2</code> MIT PyYAML YAML parser and emitter for Python <code>&gt;=5.1</code> <code>6.0.2</code> MIT pyyaml_env_tag A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>1.1</code> MIT readme_renderer readme_renderer is a library for rendering readme descriptions for Warehouse <code>&gt;=35.0</code> <code>44.0</code> Apache License, Version 2.0 requests Python HTTP for Humans. <code>&gt;=2.20</code> <code>2.32.5</code> Apache-2.0 requests-toolbelt A utility belt for advanced users of python-requests <code>&gt;=0.8.0, !=0.9.0</code> <code>1.0.0</code> Apache 2.0 rfc3986 Validating URI References per RFC 3986 <code>&gt;=1.4.0</code> <code>2.0.0</code> Apache 2.0 rich Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal <code>&gt;=12.0.0</code> <code>14.1.0</code> MIT ruff An extremely fast Python linter and code formatter, written in Rust. <code>&gt;=0.4</code> <code>0.13.1</code> MIT License SecretStorage Python bindings to FreeDesktop.org Secret Service API <code>&gt;=3.2</code> <code>3.4.0</code> BSD-3-Clause semver Python helper for Semantic Versioning (https://semver.org) <code>&gt;=3.0</code> <code>3.0.4</code> BSD License six Python 2 and 3 compatibility utilities <code>&gt;=1.5, &gt;=1.15, &lt;2</code> <code>1.17.0</code> MIT smmap A pure Python implementation of a sliding window memory map manager <code>&gt;=3.0.1, &lt;6</code> <code>5.0.2</code> BSD-3-Clause twine Collection of utilities for publishing packages on PyPI <code>&gt;=5.1</code> <code>6.2.0</code> Apache-2.0 type-lens type-lens is a Python template project designed to simplify the setup of a new project. <code>&gt;=0.2.5</code> <code>0.2.5</code> MIT types-Markdown Typing stubs for Markdown <code>&gt;=3.6</code> <code>3.9.0.20250906</code> Apache-2.0 types-PyYAML Typing stubs for PyYAML <code>&gt;=6.0</code> <code>6.0.12.20250915</code> Apache-2.0 typing_extensions Backported and Experimental Type Hints for Python 3.9+ <code>&gt;=4.9, &gt;=4.0.0</code> <code>4.15.0</code> PSF-2.0 urllib3 HTTP library with thread-safe connection pooling, file post, and more. <code>&gt;=1.26.0</code> <code>2.5.0</code> MIT watchdog Filesystem events monitoring <code>&gt;=2.0</code> <code>6.0.0</code> Apache-2.0 yore Manage legacy code with comments. <code>&gt;=0.3.3</code> <code>0.4.5</code> ISC <p>More credits from the author</p>"},{"location":"license/","title":"License","text":"<pre><code>ISC License\n\nCopyright (c) 2025, Timoth\u00e9e Mazzucotelli\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n</code></pre>"},{"location":"reference/api/","title":"API reference","text":""},{"location":"reference/api/#mkdocs_llmstxt","title":"mkdocs_llmstxt","text":"<p>mkdocs-llmstxt package.</p> <p>MkDocs plugin to generate an /llms.txt file.</p> <p>Classes:</p> <ul> <li> <code>MkdocsLLMsTxtPlugin</code>           \u2013            <p>The MkDocs plugin to generate an <code>llms.txt</code> file.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>autoclean</code>             \u2013              <p>Auto-clean the soup by removing elements.</p> </li> </ul>"},{"location":"reference/api/#mkdocs_llmstxt.MkdocsLLMsTxtPlugin","title":"MkdocsLLMsTxtPlugin","text":"<p>               Bases: <code>BasePlugin[_PluginConfig]</code></p> <p>The MkDocs plugin to generate an <code>llms.txt</code> file.</p> <p>This plugin defines the following event hooks:</p> <ul> <li><code>on_page_content</code></li> <li><code>on_post_build</code></li> </ul> <p>Check the Developing Plugins page of <code>mkdocs</code> for more information about its plugin system.</p> <p>Methods:</p> <ul> <li> <code>on_config</code>             \u2013              <p>Save the global MkDocs configuration.</p> </li> <li> <code>on_files</code>             \u2013              <p>Expand inputs for generated files.</p> </li> <li> <code>on_page_content</code>             \u2013              <p>Convert page content into a Markdown file and save the result to be processed in the <code>on_post_build</code> hook.</p> </li> <li> <code>on_post_build</code>             \u2013              <p>Create the final <code>llms.txt</code> file and the MD files for all selected pages.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>mkdocs_config</code>               (<code>MkDocsConfig</code>)           \u2013            <p>The global MkDocs configuration.</p> </li> </ul>"},{"location":"reference/api/#mkdocs_llmstxt.MkdocsLLMsTxtPlugin.mkdocs_config","title":"mkdocs_config  <code>instance-attribute</code>","text":"<pre><code>mkdocs_config: MkDocsConfig\n</code></pre> <p>The global MkDocs configuration.</p>"},{"location":"reference/api/#mkdocs_llmstxt.MkdocsLLMsTxtPlugin.on_config","title":"on_config","text":"<pre><code>on_config(config: MkDocsConfig) -&gt; MkDocsConfig | None\n</code></pre> <p>Save the global MkDocs configuration.</p> <p>Hook for the <code>on_config</code> event. In this hook, we save the global MkDocs configuration into an instance variable, to re-use it later.</p> <p>Parameters:</p> <ul> <li> <code>config</code>               (<code>MkDocsConfig</code>)           \u2013            <p>The MkDocs config object.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>MkDocsConfig | None</code>           \u2013            <p>The same, untouched config.</p> </li> </ul> Source code in <code>src/mkdocs_llmstxt/_internal/plugin.py</code> <pre><code>def on_config(self, config: MkDocsConfig) -&gt; MkDocsConfig | None:\n    \"\"\"Save the global MkDocs configuration.\n\n    Hook for the [`on_config` event](https://www.mkdocs.org/user-guide/plugins/#on_config).\n    In this hook, we save the global MkDocs configuration into an instance variable,\n    to re-use it later.\n\n    Arguments:\n        config: The MkDocs config object.\n\n    Returns:\n        The same, untouched config.\n    \"\"\"\n    if config.site_url is None:\n        raise ValueError(\"'site_url' must be set in the MkDocs configuration to be used with the 'llmstxt' plugin\")\n    self.mkdocs_config = config\n    return config\n</code></pre>"},{"location":"reference/api/#mkdocs_llmstxt.MkdocsLLMsTxtPlugin.on_files","title":"on_files","text":"<pre><code>on_files(\n    files: Files, *, config: MkDocsConfig\n) -&gt; Files | None\n</code></pre> <p>Expand inputs for generated files.</p> <p>Hook for the <code>on_files</code> event. In this hook we expand inputs for generated file (glob patterns using <code>*</code>).</p> <p>Parameters:</p> <ul> <li> <code>files</code>               (<code>Files</code>)           \u2013            <p>The collection of MkDocs files.</p> </li> <li> <code>config</code>               (<code>MkDocsConfig</code>)           \u2013            <p>The MkDocs configuration.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Files | None</code>           \u2013            <p>Modified collection or none.</p> </li> </ul> Source code in <code>src/mkdocs_llmstxt/_internal/plugin.py</code> <pre><code>def on_files(self, files: Files, *, config: MkDocsConfig) -&gt; Files | None:  # noqa: ARG002\n    \"\"\"Expand inputs for generated files.\n\n    Hook for the [`on_files` event](https://www.mkdocs.org/user-guide/plugins/#on_files).\n    In this hook we expand inputs for generated file (glob patterns using `*`).\n\n    Parameters:\n        files: The collection of MkDocs files.\n        config: The MkDocs configuration.\n\n    Returns:\n        Modified collection or none.\n    \"\"\"\n    page_uris = list(files.src_uris)\n    self._sections = {\n        section_name: self._expand_inputs(file_list, page_uris=page_uris)  # type: ignore[arg-type]\n        for section_name, file_list in self.config.sections.items()\n    }\n    self._file_uris = set(chain.from_iterable(self._sections.values()))\n    self._md_pages = {}\n    return files\n</code></pre>"},{"location":"reference/api/#mkdocs_llmstxt.MkdocsLLMsTxtPlugin.on_page_content","title":"on_page_content","text":"<pre><code>on_page_content(\n    html: str, *, page: Page, **kwargs: Any\n) -&gt; str | None\n</code></pre> <p>Convert page content into a Markdown file and save the result to be processed in the <code>on_post_build</code> hook.</p> <p>Hook for the <code>on_page_content</code> event.</p> <p>Parameters:</p> <ul> <li> <code>html</code>               (<code>str</code>)           \u2013            <p>The rendered HTML.</p> </li> <li> <code>page</code>               (<code>Page</code>)           \u2013            <p>The page object.</p> </li> </ul> Source code in <code>src/mkdocs_llmstxt/_internal/plugin.py</code> <pre><code>def on_page_content(self, html: str, *, page: Page, **kwargs: Any) -&gt; str | None:  # noqa: ARG002\n    \"\"\"Convert page content into a Markdown file and save the result to be processed in the `on_post_build` hook.\n\n    Hook for the [`on_page_content` event](https://www.mkdocs.org/user-guide/plugins/#on_page_content).\n\n    Parameters:\n        html: The rendered HTML.\n        page: The page object.\n    \"\"\"\n    if (src_uri := page.file.src_uri) in self._file_uris:\n        path_md = Path(page.file.abs_dest_path).with_suffix(\".md\")\n        page_md = _generate_page_markdown(\n            html,\n            should_autoclean=self.config.autoclean,\n            preprocess=self.config.preprocess,\n            path=str(path_md),\n        )\n\n        md_url = Path(page.file.dest_uri).with_suffix(\".md\").as_posix()\n        # Apply the same logic as in the `Page.url` property.\n        if md_url in (\".\", \"./\"):\n            md_url = \"\"\n\n        # Guaranteed to exist as we require `site_url` to be configured.\n        base = cast(\"str\", self.mkdocs_config.site_url)\n        if not base.endswith(\"/\"):\n            base += \"/\"\n        md_url = urljoin(base, md_url)\n\n        self._md_pages[src_uri] = _MDPageInfo(\n            title=page.title if page.title is not None else src_uri,\n            path_md=path_md,\n            md_url=md_url,\n            content=page_md,\n        )\n\n    return html\n</code></pre>"},{"location":"reference/api/#mkdocs_llmstxt.MkdocsLLMsTxtPlugin.on_post_build","title":"on_post_build","text":"<pre><code>on_post_build(\n    *, config: MkDocsConfig, **kwargs: Any\n) -&gt; None\n</code></pre> <p>Create the final <code>llms.txt</code> file and the MD files for all selected pages.</p> <p>Hook for the <code>on_post_build</code> event.</p> <p>Parameters:</p> <ul> <li> <code>config</code>               (<code>MkDocsConfig</code>)           \u2013            <p>MkDocs configuration.</p> </li> </ul> Source code in <code>src/mkdocs_llmstxt/_internal/plugin.py</code> <pre><code>def on_post_build(self, *, config: MkDocsConfig, **kwargs: Any) -&gt; None:  # noqa: ARG002\n    \"\"\"Create the final `llms.txt` file and the MD files for all selected pages.\n\n    Hook for the [`on_post_build` event](https://www.mkdocs.org/user-guide/plugins/#on_post_build).\n\n    Parameters:\n        config: MkDocs configuration.\n    \"\"\"\n    output_file = Path(config.site_dir).joinpath(\"llms.txt\")\n    output_file.parent.mkdir(parents=True, exist_ok=True)\n    markdown = f\"# {config.site_name}\\n\\n\"\n\n    if config.site_description is not None:\n        markdown += f\"&gt; {config.site_description}\\n\\n\"\n\n    if self.config.markdown_description is not None:\n        markdown += f\"{self.config.markdown_description}\\n\\n\"\n\n    full_markdown = markdown\n\n    for section_name, page_uris in self._sections.items():\n        markdown += f\"## {section_name}\\n\\n\"\n        for page_uri, desc in page_uris.items():\n            if page_uri not in self._md_pages:\n                _logger.warning(f\"Page URI '{page_uri}' not found in the generated pages. Skipping.\")\n                continue\n            page_title, path_md, md_url, content = self._md_pages[page_uri]\n            path_md.write_text(content, encoding=\"utf8\")\n            _logger.debug(f\"Generated MD file to {path_md}\")\n            markdown += f\"- [{page_title}]({md_url}){(': ' + desc) if desc else ''}\\n\"\n        markdown += \"\\n\"\n\n    output_file.write_text(markdown, encoding=\"utf8\")\n    _logger.debug(\"Generated file /llms.txt\")\n\n    if self.config.full_output is not None:\n        full_output_file = Path(config.site_dir).joinpath(self.config.full_output)\n        for section_name, page_uris in self._sections.items():\n            list_content = \"\\n\".join(self._md_pages[page_uri].content for page_uri in page_uris if page_uri in self._md_pages)\n            full_markdown += f\"# {section_name}\\n\\n{list_content}\"\n        full_output_file.write_text(full_markdown, encoding=\"utf8\")\n        _logger.debug(f\"Generated file /{self.config.full_output}.txt\")\n</code></pre>"},{"location":"reference/api/#mkdocs_llmstxt.autoclean","title":"autoclean","text":"<pre><code>autoclean(soup: BeautifulSoup) -&gt; None\n</code></pre> <p>Auto-clean the soup by removing elements.</p> <p>Parameters:</p> <ul> <li> <code>soup</code>               (<code>BeautifulSoup</code>)           \u2013            <p>The soup to modify.</p> </li> </ul> Source code in <code>src/mkdocs_llmstxt/_internal/preprocess.py</code> <pre><code>def autoclean(soup: Soup) -&gt; None:\n    \"\"\"Auto-clean the soup by removing elements.\n\n    Parameters:\n        soup: The soup to modify.\n    \"\"\"\n    # Remove unwanted elements.\n    for element in soup.find_all(_to_remove):\n        element.decompose()\n\n    # Unwrap autoref elements.\n    for element in soup.find_all(\"autoref\"):\n        element.replace_with(NavigableString(element.get_text()))\n\n    # Unwrap mkdocstrings div.doc-md-description.\n    for element in soup.find_all(\"div\", attrs={\"class\": \"doc-md-description\"}):\n        element.replace_with(NavigableString(element.get_text().strip()))\n\n    # Remove mkdocstrings labels.\n    for element in soup.find_all(\"span\", attrs={\"class\": \"doc-labels\"}):\n        element.decompose()\n\n    # Remove line numbers from code blocks.\n    for element in soup.find_all(\"table\", attrs={\"class\": \"highlighttable\"}):\n        element.replace_with(Soup(f\"&lt;pre&gt;{html.escape(element.find('code').get_text())}&lt;/pre&gt;\", \"html.parser\"))  # type: ignore[union-attr]\n</code></pre>"},{"location":"coverage/","title":"Coverage report","text":""}]}